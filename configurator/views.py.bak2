# configurator/views.py
from django.shortcuts import render, redirect
from django.template import engines
from .forms import RoleSelectionForm, PlatformSelectionForm, CardSelectionForm, FixedPlatformParamsForm
from .models import Role, Platform, ModularPlatform, FixedPlatform, Card

def main_form(request):
    # Determine current step
    current_step = request.session.get('step', 'role')

    if request.method == 'POST':
        if current_step == 'role':
            # Handle role selection
            form = RoleSelectionForm(request.POST)
            if form.is_valid():
                selected_role = form.cleaned_data['role']
                request.session['selected_role'] = selected_role.id
                # Next step: select platform
                request.session['step'] = 'platform'
                return redirect('main_form')

        elif current_step == 'platform':
            # We know the role from session
            role_id = request.session.get('selected_role')
            role = Role.objects.get(pk=role_id)
            form = PlatformSelectionForm(request.POST, role=role)
            if form.is_valid():
                selected_platform = form.cleaned_data['platform']
                request.session['selected_platform'] = selected_platform.id

                if selected_platform.is_modular:
                    request.session['step'] = 'modular_cards'
                else:
                    request.session['step'] = 'fixed_params'
                return redirect('main_form')

        elif current_step == 'modular_cards':
            platform_id = request.session.get('selected_platform')
            platform = Platform.objects.get(pk=platform_id)
            # platform should be a ModularPlatform
            platform = ModularPlatform.objects.get(pk=platform_id)

            form = CardSelectionForm(request.POST, platform=platform)
            if form.is_valid():
                # Save card choices in session
                slot_assignments = {}
                for slot_num in range(1, platform.num_slots + 1):
                    card_id = form.cleaned_data.get(f"slot_{slot_num}")
                    if card_id:
                        # Convert card_id to int and store
                        slot_assignments[slot_num] = int(card_id)
                    else:
                        slot_assignments[slot_num] = None
                request.session['slot_assignments'] = slot_assignments

                request.session['step'] = 'summary'
                return redirect('main_form')

        elif current_step == 'fixed_params':
            form = FixedPlatformParamsForm(request.POST)
            if form.is_valid():
                request.session['hostname'] = form.cleaned_data['hostname']
                request.session['loopback'] = form.cleaned_data['loopback']

                request.session['step'] = 'summary'
                return redirect('main_form')

        elif current_step == 'summary':
            # Final step - user confirmed, now we render final config or show them the config
            # For now, let's just render a page
            # Later we could add a confirmation and then show the Jinja2 rendered config
            if 'confirm' in request.POST:
                # Render the final Jinja2 template
                return final_config_view(request)

            # If user clicked back or something else, handle here
            # For simplicity, assume next step is final_config_view
            return redirect('main_form')

    # GET request handling (display forms):
    if current_step == 'role':
        form = RoleSelectionForm()
        return render(request, 'configurator/select_role.html', {'form': form})

    elif current_step == 'platform':
        role_id = request.session.get('selected_role')
        role = Role.objects.get(pk=role_id)
        form = PlatformSelectionForm(role=role)
        return render(request, 'configurator/select_platform.html', {'form': form, 'role': role})

    elif current_step == 'modular_cards':
        platform_id = request.session.get('selected_platform')
        platform = ModularPlatform.objects.get(pk=platform_id)
        form = CardSelectionForm(platform=platform)
        return render(request, 'configurator/modular_cards.html', {'form': form, 'platform': platform})

    elif current_step == 'fixed_params':
        form = FixedPlatformParamsForm()
        return render(request, 'configurator/fixed_params.html', {'form': form})

    elif current_step == 'summary':
        # Display summary of all chosen params
        role_id = request.session.get('selected_role')
        platform_id = request.session.get('selected_platform')
        role = Role.objects.get(pk=role_id)
        platform = Platform.objects.get(pk=platform_id)

        slot_assignments = request.session.get('slot_assignments', None)
        hostname = request.session.get('hostname', '')
        loopback = request.session.get('loopback', '')

        return render(request, 'configurator/summary.html', {
            'role': role,
            'platform': platform,
            'slot_assignments': slot_assignments,
            'hostname': hostname,
            'loopback': loopback
        })


def final_config_view(request):
    # Here we gather all data and render the final configuration using Jinja2
    role_id = request.session.get('selected_role')
    platform_id = request.session.get('selected_platform')
    role = Role.objects.get(pk=role_id)
    platform = Platform.objects.get(pk=platform_id)
    slot_assignments = request.session.get('slot_assignments', {})
    hostname = request.session.get('hostname', '')
    loopback = request.session.get('loopback', '')

    context = {
        'role': role,
        'platform': platform,
        'slot_assignments': slot_assignments,
        'hostname': hostname,
        'loopback': loopback
    }

    jinja_env = engines['jinja2']
    template = jinja_env.get_template('configurator/final_config.j2')
    rendered_config = template.render(context)

    # Clear session if desired
    request.session.flush()

    return render(request, 'configurator/final.html', {'rendered_config': rendered_config})


